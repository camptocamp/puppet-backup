#!/bin/bash -e

<% if @container -%>
PREFIX="docker exec <%= @container %> "
USER="-U <%= @user %>"
<% end -%>
BKPDIR="<%= @backup_dir %>"
BKPFMT="<%= @backup_format %>"
TODAY=$(date +%F)
DAY=$(LC_TIME= date +%A |tr 'A-Z' 'a-z')
MONTH=$(LC_TIME= date +%B |tr 'A-Z' 'a-z')
YEAR=$(LC_TIME= date +%Y)
TMPDIR=$(mktemp -d -p $BKPDIR) || exit 1
<% if !@databases.empty? -%>
DATABASES="<%= @databases.join(" ") %>"
<% else -%>
DATABASES=$(${PREFIX}psql ${USER} -Atc "SELECT datname FROM pg_database WHERE datistemplate = false"<%= @not_databases.map{|s| " | egrep -v ^#{s}$"}.join() %>)
<% end -%>

export PGOPTIONS='-c statement_timeout=0'

has_errors=0

<% if @hotstandby -%>
${PREFIX}psql ${USER} -c "SELECT pg_xlog_replay_pause();" -d template1
<% end -%>

${PREFIX}pg_dumpall -U postgres --globals-only |bzip2 > $TMPDIR/ACCOUNT-OBJECTS.$TODAY.dump.bz
if [ ${PIPESTATUS[0]} -ne 0 ]; then
  echo $(date) "FATAL: pg_dumpall --globals-only exit status not 0!" >> $BKPDIR/backup_failure
  has_errors=1
fi

for i in $DATABASES; do
  ${PREFIX}pg_dump -U postgres --format=$BKPFMT --create $i |bzip2  > $TMPDIR/$i.$TODAY.dump.bz
  if [ ${PIPESTATUS[0]} -ne 0 ]; then
    echo $(date) "FATAL: pgdump exit status not 0 for database $i!" >> $BKPDIR/backup_failure
    has_errors=1
  fi
done

<% if @hotstandby -%>
${PREFIX}psql ${USER} -c "SELECT pg_xlog_replay_resume();" -d template1
<% end -%>

<% unless @container -%>
# copy main configurations in backup archive
PG_CONFIG=$(psql -Atc "SHOW config_file")
PG_CONFIG_EXTRA=$(dirname $PG_CONFIG)/postgresql_puppet_extras.conf
PG_HBA=$(psql -Atc "SHOW hba_file")
cp $PG_CONFIG $PG_HBA $TMPDIR
test -f $PG_CONFIG_EXTRA && cp $PG_CONFIG_EXTRA $TMPDIR
<% end -%>

test -f $BKPDIR/pgsql_$DAY.tar.gz && rm $BKPDIR/pgsql_$DAY.tar.gz
tar -C $TMPDIR -c -f $BKPDIR/pgsql_$DAY.tar `ls $TMPDIR`
rm -fr $TMPDIR

<% if @keep_monthly -%>
if [ $(date +%d) = "01" ]; then
    test -f $BKPDIR/pgsql_$MONTH.tar.gz && rm $BKPDIR/pgsql_$MONTH.tar.gz
    <% if @yearly_month -%>
      cp $BKPDIR/pgsql_$DAY.tar $BKPDIR/pgsql_${MONTH}_${YEAR}.tar
    <% else -%>
    cp $BKPDIR/pgsql_$DAY.tar $BKPDIR/pgsql_$MONTH.tar
    <% end -%>
fi
<% end -%>

# This witness' age will become the age of the last successful backup
if [ $has_errors -eq 0 ]; then
  echo `date` > $BKPDIR/backup_done_witness
fi
